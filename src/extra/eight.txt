
import React from 'react';
import { Stage, Layer, Rect, Transformer ,Text} from 'react-konva';

const Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {
  const shapeRef = React.useRef();
  const trRef = React.useRef();

  React.useEffect(() => {
    if (isSelected) {
      // we need to attach transformer manually
      trRef.current.nodes([shapeRef.current]);
      trRef.current.getLayer().batchDraw();
    }
  }, [isSelected]);

  return (
    <React.Fragment>
     <Text
        text={shapeProps.textValue}
        onClick={onSelect}
        onTap={onSelect}
        ref={shapeRef}
        {...shapeProps}
        draggable
        onDragEnd={(e) => {
          onChange({
            ...shapeProps,
            x: e.target.x(),
            y: e.target.y(),
          });
        }}
        onTransformEnd={(e) => {
          // transformer is changing scale of the node
          // and NOT its width or height
          // but in the store we have only width and height
          // to match the data better we will reset scale on transform end
          const node = shapeRef.current;
          const scaleX = node.scaleX();
          const scaleY = node.scaleY();

          // we will reset it back
          node.scaleX(1);
          node.scaleY(1);
          onChange({
            ...shapeProps,
            x: node.x(),
            y: node.y(),
            // set minimal value
            width: Math.max(5, node.width() * scaleX),
            height: Math.max(node.height() * scaleY),
          });
        }}
      />
      {isSelected && (
        <Transformer
          ref={trRef}
          boundBoxFunc={(oldBox, newBox) => {
            // limit resize
            if (newBox.width < 5 || newBox.height < 5) {
              return oldBox;
            }
            return newBox;
          }}
        />
      )}
    </React.Fragment>
  );
};

const initialRectangles = [
  {
    textX: 0,
          fill: "black",
          textY: 0,
          textValue: "double click to edit and enter to finish",
          fontSize: 8,
          width: 400,
          fontStyle: "normal",
          align: "left",
  },
];

const HorizontalCard = () => {
  const [rectangles, setRectangles] = React.useState(initialRectangles);
  const [selectedId, selectShape] = React.useState(null);

  const checkDeselect = (e) => {
    // deselect when clicked on empty area
    const clickedOnEmpty = e.target === e.target.getStage();
    if (clickedOnEmpty) {
      selectShape(null);
    }
  };
console.log(rectangles)
  return (
    <Stage
      width={window.innerWidth}
      height={window.innerHeight}
      onMouseDown={checkDeselect}
      onTouchStart={checkDeselect}
    >
      <Layer>
        {rectangles.map((rect, i) => {
          return (
            <Rectangle
              key={i}
              shapeProps={rect}
              isSelected={rect.id === selectedId}
              onSelect={() => {
                selectShape(rect.id);
              }}
              onChange={(newAttrs) => {
                const rects = rectangles.slice();
                rects[i] = newAttrs;
                setRectangles(rects);
              }}
            />
          );
        })}
      </Layer>
    </Stage>
  );
};

export default HorizontalCard




// import React from 'react';
// import { Stage, Layer, Transformer ,Text} from 'react-konva';

// const Rectangle = ({ shapeProps, isSelected, onSelect, onChange }) => {
//   const shapeRef = React.useRef();
//   const trRef = React.useRef();

//   React.useEffect(() => {
//     if (isSelected) {
//       // we need to attach transformer manually
//       trRef.current.nodes([shapeRef.current]);
//       trRef.current.getLayer().batchDraw();
//     }
//   }, [isSelected]);

//   return (
//     <React.Fragment>
//      <Text
//         text={shapeProps.textValue}
//         onClick={onSelect}
//         onTap={onSelect}
//         ref={shapeRef}
//         {...shapeProps}
//         x={100}
//         y={100}
//         wrap="word"
//         width={100}
//         draggable
//         onDragEnd={(e) => {
//           onChange({
//             ...shapeProps,
//             x: e.target.x(),
//             y: e.target.y(),
//           });
//         }}
//         onTransformEnd={(e) => {
//           // transformer is changing scale of the node
//           // and NOT its width or height
//           // but in the store we have only width and height
//           // to match the data better we will reset scale on transform end
//           const node = shapeRef.current;
//           const scaleX = node.scaleX();
//           const scaleY = node.scaleY();

//           // we will reset it back
//           node.scaleX(1);
//           node.scaleY(1);
//           onChange({
//             ...shapeProps,
//             x: node.x(),
//             y: node.y(),
//             // set minimal value
//             width: Math.max(5, node.width() * scaleX),
//             height: Math.max(node.height() * scaleY),
//           });
//         }}
//       />
//       {isSelected && (
//         <Transformer
//           ref={trRef}
//           boundBoxFunc={(oldBox, newBox) => {
//             // limit resize
//             if (newBox.width < 5 || newBox.height < 5) {
//               return oldBox;
//             }
//             return newBox;
//           }}
//         />
//       )}
//     </React.Fragment>
//   );
// };

// const initialRectangles = [
//   {
//     textX: 0,
//           fill: "black",
//           textY: 0,
//           textValue: "double click to edit and enter to finish",
//           fontSize: 8,
//           width: 400,
//           fontStyle: "normal",
//           align: "left",
//   },
// ];

// const HorizontalCard = () => {
//   const [rectangles, setRectangles] = React.useState(initialRectangles);
//   const [selectedId, selectShape] = React.useState(null);

//   const checkDeselect = (e) => {
//     // deselect when clicked on empty area
//     const clickedOnEmpty = e.target === e.target.getStage();
//     if (clickedOnEmpty) {
//       selectShape(null);
//     }
//   };
//  const handleTextClick = e => {
//     console.log("click2")
//     const absPos = e.target.getAbsolutePosition();
//     console.log(absPos)
//     // let { newTextObj } = this.state;
//     // newTextObj.textX = absPos.x;
//     // newTextObj.textY = absPos.y;
//     // this.setState({
//     //   newTextObj,
//     //   isSelected:true
//     // });
//   };
 
// console.log(rectangles)
//   return (
//     <Stage
//       width={window.innerWidth}
//       height={window.innerHeight}
//       onMouseDown={checkDeselect}
//       onTouchStart={checkDeselect}
//     >
//       <Layer>
//         {rectangles.map((rect, i) => {
//           return (
//             <Rectangle
//               key={i}
//               shapeProps={rect}
//               isSelected={rect.id === selectedId}
//               onSelect={() => {
//                 selectShape(rect.id);
//               }}
//               onChange={(newAttrs) => {
//                 const rects = rectangles.slice();
//                 rects[i] = newAttrs;
//                 setRectangles(rects);
//               }}
//                handleTextDblClick={e =>handleTextClick() }
//             />


//           );
//         })}
//       </Layer>
//       <textarea
//       value={this.state.newTextObj.textValue}
//       style={{
//         position: "absolute",
//         top: 10,
//         left: 10,
//         color:"black"
//       }}
//       onChange={e => this.handleEdit(e)}

//     />
//     </Stage>
//   );
// };

// export default HorizontalCard
